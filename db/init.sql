-- LibreCash database schema with location support
-- Drop and recreate since we have zero users

-- Drop existing tables if they exist
DROP TABLE IF EXISTS location_histories CASCADE;
DROP TABLE IF EXISTS dismissed_feature_callouts CASCADE;
DROP TABLE IF EXISTS exchanges CASCADE;
DROP TABLE IF EXISTS users CASCADE;

-- Create users table with location fields
CREATE TABLE users (
    "userId" bigint NOT NULL PRIMARY KEY,
    "menuId" int,
    "username" text,
    "firstName" text,
    "lastName" text,
    "languageCode" text,
    "lon" double precision,
    "lat" double precision,
    "geog" geography(POINT, 4326),
    "search_radius_km" integer,
    "phone_number" text,
    "createdAtUtc" timestamp without time zone NOT NULL DEFAULT (now() at time zone 'utc')
);

-- Add spatial index for efficient proximity queries
CREATE INDEX users_geog_idx ON users USING gist(geog);
CREATE INDEX idx_users_created_at ON users("createdAtUtc");

-- Feature callouts table for tracking one-time messages
CREATE TABLE dismissed_feature_callouts (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "userId" bigint NOT NULL,
    "featureName" text NOT NULL,
    "createdAtUtc" timestamp without time zone NOT NULL DEFAULT (now() at time zone 'utc'),
    UNIQUE ("userId", "featureName")
);

CREATE INDEX idx_user_id_at_dismissed_feature_callouts ON dismissed_feature_callouts("userId");

-- Exchanges table for tracking all exchange transactions
CREATE TABLE IF NOT EXISTS exchanges (
    id SERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES users("userId"),
    exchange_direction VARCHAR(20) NOT NULL CHECK (exchange_direction IN ('cash_to_crypto', 'crypto_to_cash')),
    status VARCHAR(20) NOT NULL DEFAULT 'initiated' CHECK (status IN ('initiated', 'posted', 'canceled')),
    amount_usd INTEGER, -- Amount in USD without cents (nullable for now)
    lat DOUBLE PRECISION NOT NULL,
    lon DOUBLE PRECISION NOT NULL,
    geog GEOGRAPHY(Point, 4326),
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE, -- Soft delete flag
    deleted_at TIMESTAMP, -- When exchange was deleted (nullable)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for exchanges performance
CREATE INDEX IF NOT EXISTS idx_exchanges_user_id ON exchanges(user_id);
CREATE INDEX IF NOT EXISTS idx_exchanges_status ON exchanges(status);
CREATE INDEX IF NOT EXISTS idx_exchanges_created_at ON exchanges(created_at);
CREATE INDEX IF NOT EXISTS idx_exchanges_geog ON exchanges USING GIST(geog);
CREATE INDEX IF NOT EXISTS idx_exchanges_is_deleted ON exchanges(is_deleted);

-- Function to update geography column from lat/lon
CREATE OR REPLACE FUNCTION update_exchange_geog() RETURNS trigger AS $$
BEGIN
    NEW.geog := ST_SetSRID(ST_MakePoint(NEW.lon, NEW.lat), 4326);
    NEW.updated_at := CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to automatically update geog when lat/lon change
CREATE TRIGGER exchanges_geog_trigger
    BEFORE INSERT OR UPDATE ON exchanges
    FOR EACH ROW
    EXECUTE FUNCTION update_exchange_geog();

-- Timeline records table for tracking fanout messages
CREATE TABLE timeline_records (
    id SERIAL PRIMARY KEY,
    exchange_id BIGINT NOT NULL REFERENCES exchanges(id),
    recipient_user_id BIGINT NOT NULL REFERENCES users("userId"),
    telegram_message_id INTEGER, -- Telegram message ID for deletion (nullable)
    status VARCHAR(20) NOT NULL DEFAULT 'pending', -- 'pending', 'sent', 'failed', 'deleted'
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE, -- Soft delete flag
    deleted_at TIMESTAMP, -- When message was deleted (nullable)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for performance
CREATE INDEX idx_timeline_records_exchange_id ON timeline_records(exchange_id);
CREATE INDEX idx_timeline_records_recipient ON timeline_records(recipient_user_id);
CREATE INDEX idx_timeline_records_status ON timeline_records(status);
CREATE INDEX idx_timeline_records_deleted ON timeline_records(is_deleted);

-- Contact requests table for tracking "Show contact" button clicks
CREATE TABLE contact_requests (
    id SERIAL PRIMARY KEY,
    exchange_id BIGINT NOT NULL REFERENCES exchanges(id),
    requester_user_id BIGINT NOT NULL REFERENCES users("userId"),
    requester_username TEXT,           -- Username at time of request
    requester_first_name TEXT,         -- First name at time of request
    requester_last_name TEXT,          -- Last name at time of request
    requested_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- Prevent duplicate requests from same user for same exchange
    UNIQUE(exchange_id, requester_user_id)
);

-- Indexes for performance and anti-scam analysis
CREATE INDEX idx_contact_requests_exchange_id ON contact_requests(exchange_id);
CREATE INDEX idx_contact_requests_requester ON contact_requests(requester_user_id);
CREATE INDEX idx_contact_requests_requested_at ON contact_requests(requested_at);
CREATE INDEX idx_timeline_records_telegram_msg ON timeline_records(telegram_message_id) WHERE telegram_message_id IS NOT NULL;

-- Location histories table for tracking user location and radius changes (PRD012)
CREATE TABLE location_histories (
    id SERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES users("userId"),
    radius_km INTEGER NOT NULL,
    lat DOUBLE PRECISION NOT NULL,
    lon DOUBLE PRECISION NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX idx_location_histories_user_id ON location_histories(user_id);
CREATE INDEX idx_location_histories_created_at ON location_histories(user_id, created_at DESC);